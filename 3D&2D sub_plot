import numpy as np
import matplotlib.pyplot as plt
import os
import pandas as pd
import datetime
import matplotlib.ticker as ticker
import matplotlib.dates as mdates

main = 'D:My works/Solar Flare -- MagneticFreeEnergy/test/dataset/excel_ex/'
fn = sorted(os.listdir(main))  # '11520'

for i in range(len(fn)):
#     i = 8
    df = pd.read_excel(main + fn[i])

    x = df['time']
    y1 = df['free e']
    y2 = df['2D free e']
    
    idx = []
    idx1 = []
    for j in range(len(df)):
        if type(df['flare'][j]) != type(0.0):
            if 'M' in df['flare'][j]:
                idx.append(j)
            elif "X" in df['flare'][j]:
                idx1.append(j)
    idx2 = []
    idx3 = []
    for i1 in range(len(df)):
        if df['class'][i1] > 0.80000:
            idx2.append(i1)
        elif df['class'][i1] < 0.80000:
            idx3.append(i1)
    ### plot
    
    fig, ax = plt.subplots(figsize=(18, 9))
    back = 'gainsboro'
    col1 = 'royalblue'
    col2 = 'gray'
    xcol = 'red'
    mcol = 'green'
    ##############******************* background color
    if fn[i] == fn[5]:
        for k1 in range(6,len(idx2)):
            plt.axvspan(idx2[31],idx2[k1], color='gainsboro', alpha=1)
    elif fn[i]:
        for k1 in range(len(idx2)):
            plt.axvspan(idx2[k1],idx2[0], color='gainsboro', alpha=1)

    ###############***************************
    
    plt.title('3D and 2D Magnetic Free Energy of AR ' + fn[i][:-5], fontsize=30)
    plt.xticks(rotation=15, fontsize=20)
    plt.yticks(fontsize=20)
    ax.set_xlabel('Time', fontsize=25)  # (Hours, Start ' + ddate + ' UT)
    ax2 = ax.twinx()

    if fn[i] == fn[0]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.05, np.max(y1 / 1e33)+0.08)#11158
        ax2.set_ylim(np.min(y2 / 1e25)-0.01, np.max(y2 / 1e25)+0.05)#11158
        plt.xticks(ticks=([x[0], x[120], x[240],x[360]]))
    elif fn[i] == fn[1]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.04, np.max(y1 / 1e33)+0.03)#11283
        ax2.set_ylim(np.min(y2 / 1e25)-0.009, np.max(y2 / 1e25)+0.03)#11283
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480]]))
    elif fn[i] == fn[2]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.1, np.max(y1 / 1e33)+0.05)#11302
        ax2.set_ylim(np.min(y2 / 1e25)-0.01, np.max(y2 / 1e25)+0.18) #11302
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600],x[720],x[840]]))
    elif fn[i] == fn[3]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.08, np.max(y1 / 1e33)+0.05)#11429
        ax2.set_ylim(np.min(y2 / 1e25)-0.005, np.max(y2 / 1e25)+0.09)#11429
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600],x[720],x[840]]))
    elif fn[i] == fn[4]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.08, np.max(y1 / 1e33)+0.05)#11515
        ax2.set_ylim(np.min(y2 / 1e25)-0.005, np.max(y2 / 1e25)+0.09)#11515
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600],x[720]]))
    elif fn[i] == fn[5]:
        ax.set_ylabel('3D MFE (x$10^{34}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, (y1 / 1e34), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e34)-0.1, np.max(y1 / 1e34)+0.05)#12192
        ax2.set_ylim(np.min(y2 / 1e25)-0.03, np.max(y2 / 1e25)+0.09)#12192
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600],x[720],x[840]]))
    elif fn[i] == fn[6]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.1, np.max(y1 / 1e33)+0.05)#12205
        ax2.set_ylim(np.min(y2 / 1e25)-0.03, np.max(y2 / 1e25)+0.09)#12205
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600]]))
    elif fn[i] == fn[7]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.1, np.max(y1 / 1e33)+0.05)#12673
        ax2.set_ylim(np.min(y2 / 1e25)-0.02, np.max(y2 / 1e25)+0.09)#12673
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600]]))
    elif fn[i] == fn[8]:
        ax.set_ylabel('3D MFE (x$10^{33}$ erg)', color='k', fontsize=25)
        ax2.set_ylabel('2D MFE (x$10^{25}$ erg)', color='k', fontsize=25)
        ax.scatter(x, ((y1) / 1e33), color=col1, label='3D FE')
        ax2.scatter(x, (y1 / 1e40), color=col1, label='3D FE') #*********************
        ax2.scatter(x, (y2 / 1e25), color=col2, label='2D FE')
        ax.set_ylim(np.min(y1 / 1e33)-0.07, np.max(y1 / 1e33)+0.03)#12975
        ax2.set_ylim(np.min(y2 / 1e25)-0.01, np.max(y2 / 1e25)+0.04)#12975
        plt.xticks(ticks=([x[0], x[120], x[240],x[360],x[480],x[600],x[720]]))

    ax.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y1, pos: '{:,.2f}'.format(y1)))
    ax2.yaxis.set_major_formatter(ticker.FuncFormatter(lambda y1, pos: '{:,.2f}'.format(y1)))



    
    plt.xticks(rotation=15, fontsize=20)
    plt.yticks(fontsize=20)

    if len(idx1) >= 1:
        for a in range(1):
            plt.axvline(x=x[idx1[0]], color=xcol, ls='-.', linewidth=2, label='X-class')

        for k in range(1, len(idx1)):
            plt.axvline(x=x[idx1[k]], color=xcol, ls='-.', linewidth=2)

    elif len(idx1) < 1:
        pass

    if len(idx) >= 1:
        for b in range(1):
            plt.axvline(x=x[idx[0]], color=mcol, ls='--', linewidth=2, label='M-class')

        for h in range(1, len(idx)):
            plt.axvline(x=x[idx[h]], color=mcol, ls='--', linewidth=2)
    elif len(idx) < 1:
        pass

    plt.legend(loc='upper right', fontsize=18)

    plt.tight_layout()

    plt.savefig('D:My works/Solar Flare -- MagneticFreeEnergy/test/dataset/result/' + fn[i][:-5] + '_2D_3D_MFE.png', facecolor='white')
    plt.show()

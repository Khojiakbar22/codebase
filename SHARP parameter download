
import drms
import json
import math
import pandas as pd
import numpy as np
import datetime, requests, drms
import matplotlib.pylab as plt
import matplotlib.ticker as mtick
from datetime import datetime as dt_obj
import urllib
from astropy.io import fits
from sunpy.visualization.colormaps import color_tables as ct
from matplotlib.dates import *
import matplotlib.image as mpimg
import sunpy.map
import sunpy.io
from IPython.display import Image
%matplotlib inline
%config InlineBackend.figure_format='retina'
import csv
import os  # Import the os module

c = drms.Client()

# path = 'D:/My works/Solar Flare -- MagneticFreeEnergy/test/9 excel files_extended/'
path = 'D:/My works/Solar Flare -- MagneticFreeEnergy/test/dataset/excel_6/'
folder = sorted(os.listdir(path))
harp = 'D:/My works/Solar Flare -- MagneticFreeEnergy/9_HARPS.xlsx'
# print(folder)
time = []
df_harp = pd.read_excel(harp)
# print(len(df_harp['HARPS']))

for i in range(len(folder)):
    # i=1
    df = pd.read_excel(path + folder[i])
    # print(folder[i])
    harpnum = df_harp['HARPS'][i]
    ar = df_harp['NOAA AR'][i]
    ar = str(ar)
    harpnum = str(harpnum)
    print(folder[i][:-5])
    print((harpnum))
    #     print(df['noaa '+ar])
    
    # Initialize empty lists for each file
    toth = []
    meanh = []
    absh = []

    # Process each row in the DataFrame
    for j in range(len(df)):
        b = df['noaa ' + ar].values[j][6:]
        try:
            t_dt = datetime.datetime.strptime(b, '%Y%m%d_%H%M%S')
            t_d = datetime.datetime.strftime(t_dt, '[%Y.%m.%d_%H:%M:%S_TAI]')
            print(t_d)
            url = "http://jsoc.stanford.edu/cgi-bin/ajax/jsoc_info?ds=hmi.sharp_cea_720s[" + harpnum + ']' + t_d + "&op=rs_list&key=IMCRVAL1,NOAA_ARS,T_REC&seg=Bp,Br,Bt,magnetogram,conf_disambig,bitmap, MEANJZH,TOTUSJH,ABSNJZH"
            response = requests.get(url)
            data = response.json()

            ####Query the data
            hmi_query_string = 'hmi.sharp_cea_720s[' + harpnum + ']' + t_d
            keyhmi = c.query(hmi_query_string, key=drms.const.all)
            toth_val = keyhmi['TOTUSJH'][0]
            print(toth_val)
            meanh_val = keyhmi['MEANJZH'][0]
            absh_val = keyhmi['ABSNJZH'][0]

            # Append the calculated values to the lists
            toth.append(toth_val)
            meanh.append(meanh_val)
            absh.append(absh_val)
        except Exception as e:
            print(f"Error processing row {j}: {str(e)}")
            # Append NaN for skipped values
            toth.append(np.nan)
            meanh.append(np.nan)
            absh.append(np.nan)

    # Update the DataFrame with the calculated values
    df['tot_hel'] = toth
    df['mean_hel'] = meanh
    df['abs_hel'] = absh
    df.to_excel(path + folder[i], index=False)

#     save_txt = 'D:/My works/Solar Flare -- MagneticFreeEnergy/test/2D_txt/' + folder[i][:-5] + '_2D_MFE.txt'
#     save_npy = 'D:/My works/Solar Flare -- MagneticFreeEnergy/test/2D_npy/' + folder[i][:-5] + '_2D_MFE.npy'
    
#     # Save the calculated data to text and numpy files
#     np.savetxt(save_txt, mfe, delimiter='.', fmt='%.s')
#     np.save(save_npy, mfe)
